{"mode":"Text","textContent":"#pragma region VEXcode Generated Robot Configuration\n// Make sure all required headers are included.\n#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n#include <math.h>\n#include <string.h>\n\n\n#include \"vex.h\"\n\nusing namespace vex;\n\n// Brain should be defined by default\nbrain Brain;\n\n\n// START V5 MACROS\n#define waitUntil(condition)                                                   \\\n  do {                                                                         \\\n    wait(5, msec);                                                             \\\n  } while (!(condition))\n\n#define repeat(iterations)                                                     \\\n  for (int iterator = 0; iterator < iterations; iterator++)\n// END V5 MACROS\n\n\n// Robot configuration code.\nlight LightGood = light(Brain.ThreeWirePort.H);\nmotor Teer = motor(PORT1, ratio18_1, false);\n\nmotor Gear = motor(PORT2, ratio18_1, false);\n\n\n\n#pragma endregion VEXcode Generated Robot Configuration\n\n/*----------------------------------------------------------------------------*/\n/*                                                                            */\n/*    Module:       main.cpp                                                  */\n/*    Author:       {author}                                                  */\n/*    Created:      {date}                                                    */\n/*    Description:  V5 project                                                */\n/*                                                                            */\n/*----------------------------------------------------------------------------*/\n\n// Include the V5 Library\n#include \"vex.h\"\n#include <string>\n#include <vector>\n\n// Allows for easier use of the VEX Library\nusing namespace vex;\nusing std::string;\nusing std::vector;\n\nvoid printB(const char* words,int cur = 0,bool replace = true) {\n  cur > 0 && replace ?\n  Brain.Screen.clearLine(cur):\n  Brain.Screen.clearLine();\n  if(cur > 0) Brain.Screen.setCursor(cur,1);\n  Brain.Screen.print(words);\n}\n\nvoid printB(double words,int cur = 0,bool replace = true) {\n  cur > 0 && replace ?\n  Brain.Screen.clearLine(cur):\n  Brain.Screen.clearLine();\n  if(cur > 0) Brain.Screen.setCursor(cur,1);\n  Brain.Screen.print(words);\n}\n\nint main() {\n  const char* col = \"glass\";\n  const char* avgCol = \"glass\";\n  int thresh;\n  double avgThresh = 100;\n  bool flip = false;\n  bool changeDetected = false;\n  int logTimeout = 300;\n  int logTime = logTimeout;\n  int loopDelay = 10;\n  vector<int> threshLog = {};\n  vector<double> savedThreshLog = {};\n  while(true) {\n    thresh = LightGood.brightness();\n    printB(thresh,1);\n    if(thresh > 51) {col = \"glass\";}\n    else if(thresh < 31) {col = \"metal\";}\n    else {col = \"red\";};\n    printB(col,2);\n    if(col != \"glass\" && !changeDetected) {\n      changeDetected = true;\n      savedThreshLog.clear();\n    }\n    if(changeDetected && logTime && thresh < 60) {\n      threshLog.push_back(thresh);\n      logTime -= loopDelay;\n    }\n    else if (changeDetected) { \n      for(int i=0; i<threshLog.size(); i++) {\n        savedThreshLog.push_back(threshLog[i]);\n        printB(savedThreshLog[i],i+3);\n      }\n      changeDetected = false;\n      flip = true;\n      logTime = logTimeout;\n      threshLog.clear();\n    }\n    avgThresh = 0;\n    for (int i=0; i<savedThreshLog.size(); i++) {\n      avgThresh += savedThreshLog[i]/savedThreshLog.size();\n    }\n    if (flip) {\n      printB(avgThresh);\n      if(avgThresh > 60) {avgCol = \"glass\";}\n      else if(avgThresh < 50) {avgCol = \"metal\";}\n      else {avgCol = \"red\";};\n      printB(avgCol,10);\n      if (strcmp(avgCol,\"glass\")) {\n          Teer.spinToPosition(30,degrees);\n      }\n      else if (strcmp(avgCol,\"metal\")) {\n        Teer.spinToPosition(20,degrees);\n      }\n      else if (strcmp(avgCol,\"red\")) {\n        Teer.spinToPosition(30,degrees);\n      }\n      wait(700,msec);\n      Teer.spinToPosition(0,degrees);\n      flip = false;\n    }\n    \n    // detect change from glass\n    // once change is detected:\n    // log the light sensor data for some amount of time\n    //red\n    //41\n    //10 err\n    //67\n    //stable\n\n    //metal\n    //24\n    //unstable 2+-\n    //60-80\n    //10 err\n\n    //glass\n    //76\n    //unstable 5+-\n    //80\n\n    //white\n    //60\n    //unstable 5+-\n    //10 err\n    //60-70\n    wait(loopDelay,msec);\n  }\n}\n","textLanguage":"cpp","rconfig":[{"port":[8],"name":"LightGood","customName":true,"deviceType":"Light","deviceClass":"light","setting":{},"triportSourcePort":22},{"port":[1],"name":"Teer","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1"}},{"port":[2],"name":"Gear","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1"}}],"slot":0,"platform":"V5","sdkVersion":"20220215.18.00.00","appVersion":"2.3.1","fileFormat":"1.0.1","icon":"","targetBrainGen":"First","target":"Physical"}