#pragma region VEXcode Generated Robot Configuration
// Make sure all required headers are included.
#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>
#include <math.h>
#include <string.h>


#include "vex.h"

using namespace vex;

// Brain should be defined by default
brain Brain;


// START V5 MACROS
#define waitUntil(condition)                                                   \
  do {                                                                         \
    wait(5, msec);                                                             \
  } while (!(condition))

#define repeat(iterations)                                                     \
  for (int iterator = 0; iterator < iterations; iterator++)
// END V5 MACROS


// Robot configuration code.
light LightGood = light(Brain.ThreeWirePort.H);
motor Teer = motor(PORT1, ratio18_1, false);

motor Gear = motor(PORT2, ratio18_1, false);



#pragma endregion VEXcode Generated Robot Configuration

/*----------------------------------------------------------------------------*/
/*                                                                            */
/*    Module:       main.cpp                                                  */
/*    Author:       {author}                                                  */
/*    Created:      {date}                                                    */
/*    Description:  V5 project                                                */
/*                                                                            */
/*----------------------------------------------------------------------------*/

// Include the V5 Library
#include "vex.h"
#include <string>
#include <vector>

// Allows for easier use of the VEX Library
using namespace vex;
using std::string;
using std::vector;

void printB(const char* words,int cur = 0,bool replace = true) {
  cur > 0 && replace ?
  Brain.Screen.clearLine(cur):
  Brain.Screen.clearLine();
  if(cur > 0) Brain.Screen.setCursor(cur,1);
  Brain.Screen.print(words);
}

void printB(double words,int cur = 0,bool replace = true) {
  cur > 0 && replace ?
  Brain.Screen.clearLine(cur):
  Brain.Screen.clearLine();
  if(cur > 0) Brain.Screen.setCursor(cur,1);
  Brain.Screen.print(words);
}

int main() {
  const char* col = "glass";
  const char* avgCol = "glass";
  int thresh;
  double avgThresh = 100;
  bool flip = false;
  bool changeDetected = false;
  int logTimeout = 300;
  int logTime = logTimeout;
  int loopDelay = 10;
  vector<int> threshLog = {};
  vector<double> savedThreshLog = {};
  while(true) {
    thresh = LightGood.brightness();
    printB(thresh,1);
    if(thresh > 51) {col = "glass";}
    else if(thresh < 31) {col = "metal";}
    else {col = "red";};
    printB(col,2);
    if(col != "glass" && !changeDetected) {
      changeDetected = true;
      savedThreshLog.clear();
    }
    if(changeDetected && logTime && thresh < 60) {
      threshLog.push_back(thresh);
      logTime -= loopDelay;
    }
    else if (changeDetected) { 
      for(int i=0; i<threshLog.size(); i++) {
        savedThreshLog.push_back(threshLog[i]);
        printB(savedThreshLog[i],i+3);
      }
      changeDetected = false;
      flip = true;
      logTime = logTimeout;
      threshLog.clear();
    }
    avgThresh = 0;
    for (int i=0; i<savedThreshLog.size(); i++) {
      avgThresh += savedThreshLog[i]/savedThreshLog.size();
    }
    if (flip) {
      printB(avgThresh);
      if(avgThresh > 60) {avgCol = "glass";}
      else if(avgThresh < 50) {avgCol = "metal";}
      else {avgCol = "red";};
      printB(avgCol,10);
      if (strcmp(avgCol,"glass")) {
          Teer.spinToPosition(30,degrees);
      }
      else if (strcmp(avgCol,"metal")) {
        Teer.spinToPosition(20,degrees);
      }
      else if (strcmp(avgCol,"red")) {
        Teer.spinToPosition(30,degrees);
      }
      wait(700,msec);
      Teer.spinToPosition(0,degrees);
      flip = false;
    }
    
    // detect change from glass
    // once change is detected:
    // log the light sensor data for some amount of time
    //red
    //41
    //10 err
    //67
    //stable

    //metal
    //24
    //unstable 2+-
    //60-80
    //10 err

    //glass
    //76
    //unstable 5+-
    //80

    //white
    //60
    //unstable 5+-
    //10 err
    //60-70
    wait(loopDelay,msec);
  }
}
